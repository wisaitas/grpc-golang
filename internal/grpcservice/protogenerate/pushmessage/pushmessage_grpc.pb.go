// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/grpcservice/pushmessage.proto

package pushmessage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PushMessageService_SubscribePushMessages_FullMethodName = "/pushmessage.PushMessageService/SubscribePushMessages"
)

// PushMessageServiceClient is the client API for PushMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushMessageServiceClient interface {
	// Server streaming RPC - server จะ push message ไปหา client อย่างต่อเนื่อง
	SubscribePushMessages(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PushMessage], error)
}

type pushMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushMessageServiceClient(cc grpc.ClientConnInterface) PushMessageServiceClient {
	return &pushMessageServiceClient{cc}
}

func (c *pushMessageServiceClient) SubscribePushMessages(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PushMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PushMessageService_ServiceDesc.Streams[0], PushMessageService_SubscribePushMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushRequest, PushMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushMessageService_SubscribePushMessagesClient = grpc.ServerStreamingClient[PushMessage]

// PushMessageServiceServer is the server API for PushMessageService service.
// All implementations must embed UnimplementedPushMessageServiceServer
// for forward compatibility.
type PushMessageServiceServer interface {
	// Server streaming RPC - server จะ push message ไปหา client อย่างต่อเนื่อง
	SubscribePushMessages(*PushRequest, grpc.ServerStreamingServer[PushMessage]) error
	mustEmbedUnimplementedPushMessageServiceServer()
}

// UnimplementedPushMessageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPushMessageServiceServer struct{}

func (UnimplementedPushMessageServiceServer) SubscribePushMessages(*PushRequest, grpc.ServerStreamingServer[PushMessage]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePushMessages not implemented")
}
func (UnimplementedPushMessageServiceServer) mustEmbedUnimplementedPushMessageServiceServer() {}
func (UnimplementedPushMessageServiceServer) testEmbeddedByValue()                            {}

// UnsafePushMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushMessageServiceServer will
// result in compilation errors.
type UnsafePushMessageServiceServer interface {
	mustEmbedUnimplementedPushMessageServiceServer()
}

func RegisterPushMessageServiceServer(s grpc.ServiceRegistrar, srv PushMessageServiceServer) {
	// If the following call pancis, it indicates UnimplementedPushMessageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PushMessageService_ServiceDesc, srv)
}

func _PushMessageService_SubscribePushMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushMessageServiceServer).SubscribePushMessages(m, &grpc.GenericServerStream[PushRequest, PushMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushMessageService_SubscribePushMessagesServer = grpc.ServerStreamingServer[PushMessage]

// PushMessageService_ServiceDesc is the grpc.ServiceDesc for PushMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pushmessage.PushMessageService",
	HandlerType: (*PushMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePushMessages",
			Handler:       _PushMessageService_SubscribePushMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/grpcservice/pushmessage.proto",
}
